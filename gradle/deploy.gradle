allprojects {
  tasks.withType(Jar) {
    manifest {
      attributes(
        "Automatic-Module-Name": project.group + '.' + project.name,
        "Implementation-Title": project.group + '.' + project.name,
        "Implementation-Version": archiveVersion,
        "Implementation-Vendor": "selenide.org")
    }
  }
  tasks.withType(Javadoc) {
    failOnError = false
  }
}

task allprojectsJar(type: Jar, dependsOn: classes) {
  from allprojects.sourceSets.main.output
  destinationDir file("${project.buildDir}/libs-to-upload")
}

task allprojectsSourcesJar(type: Jar) {
  archiveClassifier = 'sources'
  from allprojects.sourceSets.main.allSource
  destinationDir file("${project.buildDir}/libs-to-upload")
}

task allprojectsJavadoc(type: Javadoc, dependsOn: classes) {
  source = allprojects.sourceSets.main.allJava
  destinationDir = file("${project.docsDir}/javadoc-to-upload")
  classpath = project.sourceSets.main.compileClasspath
  classpath += project(":statics").sourceSets.main.compileClasspath
  classpath += project(":modules:grid").sourceSets.main.compileClasspath
  classpath += project(":modules:junit4").sourceSets.main.compileClasspath
  classpath += project(":modules:testng").sourceSets.main.compileClasspath
}

task allprojectsJavadocJar(type: Jar, dependsOn: allprojectsJavadoc) {
  archiveClassifier = 'javadoc'
  from allprojectsJavadoc.destinationDir
  destinationDir file("${project.buildDir}/libs-to-upload")
}

if (project.hasProperty("signing.keyId")) {
  apply plugin: 'signing'
  apply plugin: 'maven-publish'

  signing {
    afterEvaluate {
      sign publishing.publications.mavenJava
    }
  }

  artifacts {
    archives allprojectsJar
    archives allprojectsSourcesJar
    archives allprojectsJavadocJar
  }

  publishing {
    repositories {
      maven {
        name 'Maven'
        url project.version.endsWith("-SNAPSHOT") ?
          'https://oss.sonatype.org/content/repositories/snapshots/' :
          'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username "$sonatypeUsername"
          password "$sonatypePassword"
        }
      }
    }
    publications {
      mavenJava(MavenPublication) {
        groupId "${project.group}"
        artifactId "${project.name}"

        artifact(allprojectsJar)
        artifact(allprojectsSourcesJar)
        artifact(allprojectsJavadocJar)

        pom {
          name = archivesBaseName
          description = 'Selenide = concise API for Selenium WebDriver'
          url = 'https://github.com/selenide/selenide'
          licenses {
            license {
              name = 'MIT'
              url = 'https://opensource.org/licenses/MIT'
            }
          }
          developers {
            developer {
              id = 'asolntsev'
              name = 'Andrei Solntsev'
            }
            developer {
              id = 'BorisOsipov'
              name = 'Boris Osipov'
            }
            developer {
              id = 'rosolko'
              name = 'Aliaksandr Rasolka'
            }
            developer {
              id = 'vinogradoff'
              name = 'Alexei Vinogradov'
            }
            developer {
              id = 'dstekanov'
              name = 'Dmytro Stekanov'
            }
          }
          scm {
            connection = 'scm:git@github.com:selenide/selenide.git'
            developerConnection = 'scm:git@github.com:selenide/selenide.git'
            url = 'https://github.com/selenide/selenide'
          }
          withXml {
            def dependenciesNode = asNode().appendNode('dependencies')

            configurations.api.allDependencies.each {
              def dependencyNode = dependenciesNode.appendNode('dependency')
              dependencyNode.appendNode('groupId', it.group)
              dependencyNode.appendNode('artifactId', it.name)
              dependencyNode.appendNode('version', it.version)
            }
            (configurations.implementation.allDependencies-configurations.api.allDependencies).each {
              def dependencyNode = dependenciesNode.appendNode('dependency')
              dependencyNode.appendNode('groupId', it.group)
              dependencyNode.appendNode('artifactId', it.name)
              dependencyNode.appendNode('version', it.version)
              dependencyNode.appendNode('scope', 'runtime')
            }
          }
        }
      }
    }
  }
}

